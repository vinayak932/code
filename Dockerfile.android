# Dockerfile for building APK in containerized environment
FROM node:18-alpine AS builder

# Install dependencies for Android build
RUN apk add --no-cache \
    openjdk11-jdk \
    android-tools \
    git \
    curl \
    unzip

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
ENV PATH=$PATH:$JAVA_HOME/bin

# Install Android SDK
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

RUN mkdir -p $ANDROID_HOME && \
    cd $ANDROID_HOME && \
    curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip && \
    unzip sdk-tools.zip && \
    rm sdk-tools.zip

# Accept Android licenses
RUN yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_HOME --licenses

# Install required Android packages
RUN $ANDROID_HOME/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_HOME \
    "platform-tools" \
    "platforms;android-33" \
    "build-tools;33.0.0"

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY capacitor.config.ts ./
COPY next.config.mjs ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Build the app
RUN npm run build && npm run export

# Initialize Capacitor
RUN npx cap init "AI Stock Predictor" "com.aistockpredictor.app" --web-dir=out
RUN npx cap add android
RUN npx cap sync

# Build APK
RUN cd android && ./gradlew assembleDebug

# Extract APK
RUN cp android/app/build/outputs/apk/debug/app-debug.apk /app/ai-stock-predictor.apk

# Final stage - just the APK
FROM scratch AS apk
COPY --from=builder /app/ai-stock-predictor.apk /ai-stock-predictor.apk
